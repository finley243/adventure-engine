func drop_equipped() {
    drop_equipped_specified_slot("hand_main");
    drop_equipped_specified_slot("hand_off");
}

func drop_equipped_specified_slot(equippedSlot) {
    // Test comment
	if (stat.subject.("has_equipped_" + equippedSlot)) {
		var dropAreaID = stat.subject.area.id;
		var equippedItemID = stat.subject.equipped_item(equippedSlot).id;
		transferItem(transferType = "instance", from = stat.subject.inventory, to = stat.area(dropAreaID).inventory, item = equippedItemID);
		sensoryEvent(phrase = "forceDrop", area = stat.subject.area.id);
	}
}

func drop_equipped_force() {
    drop_equipped_force_specified_slot("hand_main");
    drop_equipped_force_specified_slot("hand_off");
}

func drop_equipped_force_specified_slot(equippedSlot) {
	if (stat.subject.("has_equipped_" + equippedSlot)) {
		var dropAreaID = randomFromSet(set = stat.subject.area.movable_areas);
		var equippedItemID = stat.subject.equipped_item(equippedSlot).id;
		transferItem(transferType = "instance", from = stat.subject.inventory, to = stat.area(dropAreaID).inventory, item = equippedItemID);
		sensoryEvent(phrase = "forceDrop", area = stat.subject.area.id);
	}
}

func on_player_level_up() {
    var skillPoints = 2;
    skillMenu(statHolder.subject, skillPoints);
}

func float hit_chance_skill(attackSkill, dodgeSkill) {
    var attackerSkillLevel = stat.subject.("skill_" + attackSkill);
    var targetSkillLevel = dodgeSkill == null || statHolderType(statHolder.target) != "actor" ? 0 : stat.target.("skill_" + dodgeSkill);
    var hitChance = scaleLog(attackerSkillLevel, 1, 10, 0.1f, 0.9f);
    if (targetSkillLevel >= attackerSkillLevel) {
        var penaltyMult = targetSkillLevel - attackerSkillLevel + 1;
        hitChance -= penaltyMult * 0.05f;
    }
    return hitChance;
}